// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	v4 "github.com/aws/aws-sdk-go/aws/signer/v4"
	gomock "github.com/golang/mock/gomock"
)

// MockAdminClient is a mock of AdminClient interface.
type MockAdminClient struct {
	ctrl     *gomock.Controller
	recorder *MockAdminClientMockRecorder
}

// MockAdminClientMockRecorder is the mock recorder for MockAdminClient.
type MockAdminClientMockRecorder struct {
	mock *MockAdminClient
}

// NewMockAdminClient creates a new mock instance.
func NewMockAdminClient(ctrl *gomock.Controller) *MockAdminClient {
	mock := &MockAdminClient{ctrl: ctrl}
	mock.recorder = &MockAdminClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminClient) EXPECT() *MockAdminClientMockRecorder {
	return m.recorder
}

// LoadUserCredentials mocks base method.
func (m *MockAdminClient) LoadUserCredentials() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUserCredentials")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadUserCredentials indicates an expected call of LoadUserCredentials.
func (mr *MockAdminClientMockRecorder) LoadUserCredentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUserCredentials", reflect.TypeOf((*MockAdminClient)(nil).LoadUserCredentials))
}

// MockAuthParser is a mock of AuthParser interface.
type MockAuthParser struct {
	ctrl     *gomock.Controller
	recorder *MockAuthParserMockRecorder
}

// MockAuthParserMockRecorder is the mock recorder for MockAuthParser.
type MockAuthParserMockRecorder struct {
	mock *MockAuthParser
}

// NewMockAuthParser creates a new mock instance.
func NewMockAuthParser(ctrl *gomock.Controller) *MockAuthParser {
	mock := &MockAuthParser{ctrl: ctrl}
	mock.recorder = &MockAuthParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthParser) EXPECT() *MockAuthParserMockRecorder {
	return m.recorder
}

// FindAccessKey mocks base method.
func (m *MockAuthParser) FindAccessKey(authHeader string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccessKey", authHeader)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccessKey indicates an expected call of FindAccessKey.
func (mr *MockAuthParserMockRecorder) FindAccessKey(authHeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccessKey", reflect.TypeOf((*MockAuthParser)(nil).FindAccessKey), authHeader)
}

// MockAuthCache is a mock of AuthCache interface.
type MockAuthCache struct {
	ctrl     *gomock.Controller
	recorder *MockAuthCacheMockRecorder
}

// MockAuthCacheMockRecorder is the mock recorder for MockAuthCache.
type MockAuthCacheMockRecorder struct {
	mock *MockAuthCache
}

// NewMockAuthCache creates a new mock instance.
func NewMockAuthCache(ctrl *gomock.Controller) *MockAuthCache {
	mock := &MockAuthCache{ctrl: ctrl}
	mock.recorder = &MockAuthCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthCache) EXPECT() *MockAuthCacheMockRecorder {
	return m.recorder
}

// GetRequestSigner mocks base method.
func (m *MockAuthCache) GetRequestSigner(accessKeyId string) (*v4.Signer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestSigner", accessKeyId)
	ret0, _ := ret[0].(*v4.Signer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestSigner indicates an expected call of GetRequestSigner.
func (mr *MockAuthCacheMockRecorder) GetRequestSigner(accessKeyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestSigner", reflect.TypeOf((*MockAuthCache)(nil).GetRequestSigner), accessKeyId)
}

// Load mocks base method.
func (m *MockAuthCache) Load() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockAuthCacheMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockAuthCache)(nil).Load))
}

// RunSync mocks base method.
func (m *MockAuthCache) RunSync(interval time.Duration, ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunSync", interval, ctx)
}

// RunSync indicates an expected call of RunSync.
func (mr *MockAuthCacheMockRecorder) RunSync(interval, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSync", reflect.TypeOf((*MockAuthCache)(nil).RunSync), interval, ctx)
}
